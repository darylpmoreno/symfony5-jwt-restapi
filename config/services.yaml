parameters:
    locale: 'en'
    api.version: 'v1'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    sensio_framework_extra.view.listener:
        alias: Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener

    fos_rest.serializer.exception_normalizer.jms:
        class: App\Serializer\Normalizer\ExceptionHandler
        arguments:
            - '@fos_rest.exception.messages_map'
            - '%kernel.debug%'
        public: false       # Allows optimizing the container by removing unused services; this also means
        tags:
           - jms_serializer.subscribing_handler

    app.rule_manager:
        class: App\Service\RuleManager
        public: true

    app.rule_manager.is_numeric:
        class: App\Service\IsNumericRule
        public: true
        tags:
           - rule_manager.rule

    app.rule_manager.greater_than:
        class: App\Service\GreaterThanRule
        public: true
        tags:
           - rule_manager.rule

    get_set_method_normalizer:
        class: Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer
        public: false
        tags: [serializer.normalizer]

    app.encoder.json:
        class: Symfony\Component\Serializer\Encoder\JsonEncoder
        public: true

    app.normalizer.user:
        class: App\Serializer\Normalizer\UserNormalizer
        public: true

    app.listener.meeting_registered:
        class: App\EventListener\MeetingRegisteredListener
        tags:
            - { name: kernel.event_listener, event: meeting.registered }

# define services
    App\Services\MeetingService: ~

    App\Services\Interfaces\MeetingInterface: '@App\Services\MeetingService'

    meeting_converter:
        class: App\Request\ParamConverter\MeetingConverter
        tags:
            - { name: request.param_converter, priority: -2, converter: meeting_converter }


    App\MessageHandler\:
        resource: '../src/MessageHandler'
        tags: ['messenger.message_handler']

    # Service locator
    my.event_writers:
        class: Symfony\Component\DependencyInjection\ServiceLocator
        arguments:
            - memory: '@App\Infrastructure\InMemory'
            - ampq: '@App\Infrastructure\RabbitMQ'
        tags: ['controller.service_locator']

    App\Infrastructure\InMemory: ~

    App\Infrastructure\RabbitMQ: ~

